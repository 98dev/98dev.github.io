<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA常用数据结构</title>
    <url>/2022/04/03/JAVA%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>本文整理了<code>Java</code>语言的常用数据结构，方便刷题&#x2F;面试时使用。</p>
<span id="more"></span>


<div style="width:100%;text-align: center;"> 
    <img  
                     lazyload
                     alt="image"
                     data-src="https://z3.ax1x.com/2021/08/19/fqIo9J.png"
                      
    alt="Logo" 
    style="height:256px;margin: 2rem auto;"
                >
</div>


<table>
<thead>
<tr>
<th>容器</th>
<th>对应数据结构</th>
</tr>
</thead>
<tbody><tr>
<td>List</td>
<td>变长数组</td>
</tr>
<tr>
<td>Queue</td>
<td>队列</td>
</tr>
<tr>
<td>PriorityQueue</td>
<td>堆</td>
</tr>
<tr>
<td>Stack</td>
<td>栈</td>
</tr>
<tr>
<td>Deque</td>
<td>双端队列</td>
</tr>
<tr>
<td>Set</td>
<td>集合</td>
</tr>
<tr>
<td>Map</td>
<td>键值表</td>
</tr>
<tr>
<td>Pair</td>
<td>元素对</td>
</tr>
</tbody></table>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------ArrayList Start------&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义 ArrayList</span></span><br><span class="line">        <span class="comment">// 定义一个空 ArrayList</span></span><br><span class="line">        List&lt;Integer&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义一个空 ArrayList，初始容量为3</span></span><br><span class="line">        List&lt;Integer&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 定义一个包含元素1,2,3 的 ArrayList</span></span><br><span class="line">        ArrayList&lt;Integer&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 ArrayList</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size(); i++)</span><br><span class="line">            System.out.print(c.get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : c)</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 ArrayList 第一个和最后一个元素</span></span><br><span class="line">        System.out.println(c.get(<span class="number">0</span>)); <span class="comment">// 第一个元素：c[0]常用</span></span><br><span class="line">        System.out.println(c.get(c.size() - <span class="number">1</span>)); <span class="comment">// 最后一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 ArrayList 尾部添加、删除元素</span></span><br><span class="line">        c.add(<span class="number">4</span>);</span><br><span class="line">        c.remove(c.size() - <span class="number">1</span>);</span><br><span class="line">        c.remove(c.size() - <span class="number">1</span>);</span><br><span class="line">        System.out.println(c.size()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空 ArrayList</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c.size()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ArrayList 之间的比较需要自己实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------ArrayList End------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Queue Start------&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义q 不是new Queue, 而是LinkedList</span></span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 入队、出队 不建议使用add/remove(插入失败会报异常) 建议使用offer/poll</span></span><br><span class="line">    q.offer(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">    q.offer(<span class="number">2</span>); <span class="comment">// 1 2</span></span><br><span class="line">    q.offer(<span class="number">3</span>); <span class="comment">// 1 2 3</span></span><br><span class="line">    q.offer(<span class="number">4</span>); <span class="comment">// 1 2 3 4</span></span><br><span class="line">    q.poll(); <span class="comment">// 2 3 4</span></span><br><span class="line">    <span class="comment">// 获取队头元素 不建议使用element 建议使用peek</span></span><br><span class="line">    System.out.println(q.peek());</span><br><span class="line">    System.out.println(q.size());</span><br><span class="line">    <span class="comment">// 遍历队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : q) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空队列</span></span><br><span class="line">    q.clear();</span><br><span class="line">    System.out.println(q.isEmpty());</span><br><span class="line">    System.out.println(<span class="string">&quot;------Queue End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPriorityQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------PriorityQueue Start------&quot;</span>);</span><br><span class="line">    <span class="comment">// 注意声明的方式</span></span><br><span class="line">    Queue&lt;Integer&gt; q1 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(); <span class="comment">// 小根堆</span></span><br><span class="line">    Queue&lt;Integer&gt; q2 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(((o1, o2) -&gt; o2 - o1)); <span class="comment">// 大根堆</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Rec</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Rec&gt; &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">        Rec(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Rec o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.x - o.x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Rec&#123;&quot;</span> + <span class="string">&quot;x=&quot;</span> + x + <span class="string">&quot;, y=&quot;</span> + y + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Rec&gt; q3 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    q3.offer(<span class="keyword">new</span> <span class="title class_">Rec</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    q3.offer(<span class="keyword">new</span> <span class="title class_">Rec</span>(<span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line">    q3.offer(<span class="keyword">new</span> <span class="title class_">Rec</span>(<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">    q3.offer(<span class="keyword">new</span> <span class="title class_">Rec</span>(<span class="number">3</span>, <span class="number">9</span>));</span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    q3.poll();</span><br><span class="line">    System.out.println(<span class="string">&quot;堆顶: &quot;</span> + q3.peek());</span><br><span class="line">    <span class="keyword">for</span> (Rec i : q3) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;------PriorityQueue End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStack</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Stack Start------&quot;</span>);</span><br><span class="line">    <span class="comment">// Stack 推荐使用Deque实现 两者API完全一致</span></span><br><span class="line">    Deque&lt;Integer&gt; stk = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    stk.push(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">    stk.push(<span class="number">2</span>); <span class="comment">// 1 2</span></span><br><span class="line">    stk.push(<span class="number">3</span>); <span class="comment">// 1 2 3</span></span><br><span class="line">    stk.push(<span class="number">4</span>); <span class="comment">// 1 2 3 4</span></span><br><span class="line">    stk.pop(); <span class="comment">// 1 2 3</span></span><br><span class="line">    <span class="comment">// 栈顶元素 此时为3</span></span><br><span class="line">    System.out.println(stk.peek());</span><br><span class="line">    System.out.println(stk.size());</span><br><span class="line">    <span class="comment">// 从栈顶向栈底遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : stk) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    stk.clear();</span><br><span class="line">    System.out.println(stk.isEmpty());</span><br><span class="line">    System.out.println(<span class="string">&quot;------Stack End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDeque</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Deque Start------&quot;</span>);</span><br><span class="line">    <span class="comment">// Stack 推荐使用Deque实现 两者API完全一致</span></span><br><span class="line">    Deque&lt;Integer&gt; d = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    d.addLast(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">    d.addLast(<span class="number">2</span>); <span class="comment">// 1 2</span></span><br><span class="line">    d.addFirst(<span class="number">3</span>); <span class="comment">// 3 1 2</span></span><br><span class="line">    d.addFirst(<span class="number">4</span>); <span class="comment">// 4 3 1 2</span></span><br><span class="line">    d.removeFirst(); <span class="comment">// 3 1 2</span></span><br><span class="line">    <span class="comment">// 返回队头元素</span></span><br><span class="line">    System.out.println(d.getFirst());</span><br><span class="line">    <span class="comment">// 返回队尾元素</span></span><br><span class="line">    System.out.println(d.getLast());</span><br><span class="line">    System.out.println(d.size());</span><br><span class="line">    d.clear();</span><br><span class="line">    System.out.println(d.isEmpty());</span><br><span class="line">    System.out.println(<span class="string">&quot;------Deque End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Set Start------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LinkedHashSet 按照插入顺序 </span></span><br><span class="line"><span class="comment">     * TreeSet 按照元素自然顺序 要求元素具备Comparator方法 </span></span><br><span class="line"><span class="comment">     * HashSet 无序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LinkedHashSet 链表实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LinkedHashSet&lt;Integer&gt; ls = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    ls.add(<span class="number">4</span>);</span><br><span class="line">    ls.add(<span class="number">5</span>);</span><br><span class="line">    ls.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ls) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TreeSet 红黑树实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    ts.add(<span class="number">4</span>);</span><br><span class="line">    ts.add(<span class="number">5</span>);</span><br><span class="line">    ts.add(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 自动排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ts) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// 排序后的第一个元素</span></span><br><span class="line">    System.out.println(ts.first());</span><br><span class="line">    <span class="comment">// 排序后的最后一个元素</span></span><br><span class="line">    System.out.println(ts.last());</span><br><span class="line">    <span class="comment">// 判断存在某个元素</span></span><br><span class="line">    System.out.println(ts.contains(<span class="number">3</span>));</span><br><span class="line">    <span class="comment">// ceiling/higher</span></span><br><span class="line">    System.out.println(ts.ceiling(<span class="number">4</span>)); <span class="comment">// 返回大于等于4的最小元素: 4</span></span><br><span class="line">    System.out.println(ts.higher(<span class="number">4</span>)); <span class="comment">// 返回大于4的最小元素: 5</span></span><br><span class="line">    <span class="comment">// floor/lower</span></span><br><span class="line">    System.out.println(ts.floor(<span class="number">4</span>)); <span class="comment">// 返回小于等于4的最大元素: 4</span></span><br><span class="line">    System.out.println(ts.lower(<span class="number">4</span>)); <span class="comment">// 返回小于4的最大元素: 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 哈希表实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HashSet&lt;Integer&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    hs.add(<span class="number">12</span>);</span><br><span class="line">    hs.add(<span class="number">4</span>);</span><br><span class="line">    hs.add(<span class="number">5</span>);</span><br><span class="line">    hs.add(<span class="number">69</span>);</span><br><span class="line">    hs.add(<span class="number">9</span>);</span><br><span class="line">    <span class="comment">// 移除元素     </span></span><br><span class="line">    hs.remove(<span class="number">5</span>); </span><br><span class="line">    <span class="comment">// 可以看出其输出是无序的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : hs) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------Set End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Map Start------&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TreeMap 有序的Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TreeMap&lt;String, Integer&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    tm.put(<span class="string">&quot;tm4&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    tm.put(<span class="string">&quot;tm3&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    tm.put(<span class="string">&quot;tm2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    tm.put(<span class="string">&quot;tm1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    tm.remove(<span class="string">&quot;tm2&quot;</span>);</span><br><span class="line">    <span class="comment">// 自动排序</span></span><br><span class="line">    <span class="keyword">for</span> (String key : tm.keySet()) &#123;</span><br><span class="line">        System.out.println(tm.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(tm.firstEntry());</span><br><span class="line">    System.out.println(tm.lastEntry());</span><br><span class="line">    System.out.println(tm.containsKey(<span class="string">&quot;tm1&quot;</span>));</span><br><span class="line">    System.out.println(tm.containsValue(<span class="number">1</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap 无序的Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HashMap&lt;String, Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hm.put(<span class="string">&quot;hm4&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;hm3&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;hm2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;hm1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    hm.remove(<span class="string">&quot;hm2&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : hm.keySet()) &#123;</span><br><span class="line">        System.out.println(hm.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hm.containsKey(<span class="string">&quot;hm1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;------Map End------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPair</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------Pair Start------&quot;</span>);</span><br><span class="line">    <span class="comment">// 通常建议自己手写一个Pair类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pair</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Pair&gt; &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        Pair(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Pair o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x != o.x) <span class="keyword">return</span> x - o.x;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> y - o.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot; y: &quot;</span> + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Pair</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">Pair</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="type">Pair</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Pair&gt; pairList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    pairList.add(c); pairList.add(b); pairList.add(a);</span><br><span class="line">    <span class="keyword">for</span> (Pair p : pairList) &#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(pairList);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">for</span> (Pair p : pairList) &#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------Pair End------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>手动构造LeetCode的输入——二叉树</title>
    <url>/2022/06/01/%E6%89%8B%E5%8A%A8%E6%9E%84%E9%80%A0LeetCode%E7%9A%84%E8%BE%93%E5%85%A5%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>在面试的时候，二叉树类题目出现频率也非常高，我遇到过很多经典题目，比如两棵二叉树的最近公共祖先、判断一棵二叉树是否是另一棵的子结构、二叉树的最大宽度、深度、直径……为了验证算法准确性，我们需要自行构造二叉树的数据并向面试官解释。构造二叉树要比链表更加麻烦，可以参考本实现。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">buildTree</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(arr[<span class="number">0</span>]);</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">r</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="keyword">if</span> (arr[cur] == <span class="literal">null</span>) &#123;</span><br><span class="line">                r.left=<span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(arr[cur]);</span><br><span class="line">                q.offer(r.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++cur &gt;= arr.length) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[cur] == <span class="literal">null</span>) &#123;</span><br><span class="line">                r.right = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(arr[cur]);</span><br><span class="line">                q.offer(r.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++cur &gt;= arr.length) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> buildTree(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">3</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        dfs(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>手动构造LeetCode的输入——链表</title>
    <url>/2022/06/01/%E6%89%8B%E5%8A%A8%E6%9E%84%E9%80%A0LeetCode%E7%9A%84%E8%BE%93%E5%85%A5%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>在面试的时候，链表类题目很常见，我们通常需要共享屏幕在IDE里面敲代码，而不像LeetCode已经提前定义好了链表的数据结构，可以直接使用。 因此我们要学会手动构造链表，避免在面试中会写核心逻辑但是基本数据结构却写不出来。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用arr为参数，创建一个链表，当前的ListNode为链表头结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;arr can not be empty&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.val = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; arr.length ; i ++)&#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(arr[i]);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以当前节点为头结点的链表信息字符串</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            s.append(cur.val).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(arr);</span><br><span class="line">        System.out.println(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
</search>
